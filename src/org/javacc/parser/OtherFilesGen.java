/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.javacc.parser;

import java.util.ArrayList;
import java.util.List;

/**
 * Generates the Constants file.
 */
public class OtherFilesGen extends JavaCCGlobals implements JavaCCParserConstants {

  public static boolean keepLineCol;

  public static String printHeader(java.io.PrintWriter ostr) {
    Token t = null;
    StringBuilder result = new StringBuilder();
    if (cu_to_insertion_point_1.size() != 0 &&
        ((Token)cu_to_insertion_point_1.get(0)).kind == PACKAGE
       ) {
      for (int i = 1; i < cu_to_insertion_point_1.size(); i++) {
        if (((Token)cu_to_insertion_point_1.get(i)).kind == SEMICOLON) {
          printTokenSetup((Token)(cu_to_insertion_point_1.get(0)));
          for (int j = 0; j <= i; j++) {
            t = (Token)(cu_to_insertion_point_1.get(j));
            printToken(t, ostr);
            if (j >0 && j < i){
              result.append(t);
            }
          }
          printTrailingComments(t, ostr);
          ostr.println("");
          ostr.println("");
          break;
        }
      }
    }
    return result.toString();
  }

  public static void gen_ElementTypes() {
    try {
      ostr = new java.io.PrintWriter(
                new java.io.BufferedWriter(
                   new java.io.FileWriter(
                     new java.io.File(Options.getOutputDirectory(), cu_name + "ElementTypes.java")
                   ),
                   8192
                )
             );
    } catch (java.io.IOException e) {
      JavaCCErrors.semantic_error("Could not open file " + cu_name + "ElementTypes.java for writing.");
      throw new Error();
    }

    List tn = new ArrayList(toolNames);
    tn.add(toolName);
    ostr.println("/* " + getIdString(tn, cu_name + "ElementTypes.java") + " */");
    String packageName = printHeader(ostr);
    ostr.println("import " + packageName + "." + cu_name + "Language;");
    ostr.println("import com.intellij.psi.tree.IElementType;");
    ostr.println("import com.intellij.lang.Language;");
    ostr.println("import com.intellij.psi.tree.IFileElementType;");
    ostr.println("import com.intellij.psi.tree.IStubFileElementType;");
    ostr.println("/**");
    ostr.println(" * Generated by org.javacc.parser.OtherFilesGen#gen_ElementTypes()");
    ostr.println(" */");
    if(Options.getSupportClassVisibilityPublic()) {
      ostr.print("public ");
    }
    ostr.println("interface " + cu_name + "ElementTypes {");
    ostr.print("  " + cu_name + "Language LANG = Language.findInstance(");
    ostr.println(cu_name + "Language.class);");
    ostr.println("  public static IFileElementType FILE = new IStubFileElementType(LANG);");
    ostr.println(" }");
    ostr.close();
  }

  public static void gen_ElementType() {
    try {
      ostr = new java.io.PrintWriter(
                new java.io.BufferedWriter(
                   new java.io.FileWriter(
                     new java.io.File(Options.getOutputDirectory(), cu_name + "ElementType.java")
                   ),
                   8192
                )
             );
    } catch (java.io.IOException e) {
      JavaCCErrors.semantic_error("Could not open file " + cu_name + "ElementType.java for writing.");
      throw new Error();
    }

    List tn = new ArrayList(toolNames);
    tn.add(toolName);
    ostr.println("/* " + getIdString(tn, cu_name + "ElementType.java") + " */");
    String packageName = printHeader(ostr);
    ostr.println("import " + packageName + "." + cu_name + "Language;");
    ostr.println("import com.intellij.psi.tree.IElementType;");
    ostr.println("import org.jetbrains.annotations.NonNls;");
    ostr.println("/**");
    ostr.println(" * Generated by org.javacc.parser.OtherFilesGen#gen_ElementType()");
    ostr.println(" */");
    if(Options.getSupportClassVisibilityPublic()) {
      ostr.print("public ");
    }
    ostr.println("class " + cu_name + "ElementType extends IElementType {");
    ostr.println("   public " + cu_name + "ElementType(@NonNls String debugName) {");
    ostr.println("     super(debugName, " + cu_name + "ElementTypes.LANG);");
    ostr.println("   }");
    ostr.println("   @SuppressWarnings({\"HardCodedStringLiteral\"})");
    ostr.println("   public String toString() {");
    ostr.print("     return \"");
    ostr.print(cu_name);
    ostr.println(":\" + super.toString();");
    ostr.println("   }");
    ostr.println(" }");
    ostr.close();
  }

  public static void gen_Language() {
    try {
      ostr = new java.io.PrintWriter(
                new java.io.BufferedWriter(
                   new java.io.FileWriter(
                     new java.io.File(Options.getOutputDirectory(), cu_name + "Language.java")
                   ),
                   8192
                )
             );
    } catch (java.io.IOException e) {
      JavaCCErrors.semantic_error("Could not open file " + cu_name + "Language.java for writing.");
      throw new Error();
    }

    List tn = new ArrayList(toolNames);
    tn.add(toolName);
    ostr.println("/* " + getIdString(tn, cu_name + "Language.java") + " */");
    String packageName = printHeader(ostr);
    ostr.println("import com.intellij.lang.Language;");
    ostr.println("/**");
    ostr.println(" * Generated by org.javacc.parser.OtherFilesGen#gen_Language()");
    ostr.println(" */");
    if(Options.getSupportClassVisibilityPublic()) {
      ostr.print("public ");
    }
    ostr.println("class " + cu_name + "Language extends Language {");
    ostr.println("    public " + cu_name + "Language() {");
    ostr.println("      super(\""+cu_name.toUpperCase()+"\", \"text/"+cu_name.toLowerCase()+"\");");
    ostr.println("    }   ");
    ostr.println("    public String getDisplayName() {");
    ostr.println("      return \""+cu_name.toUpperCase()+"\";");
    ostr.println("    }   ");
    ostr.println("    public boolean isCaseSensitive() {");
    ostr.println("      return "+!Options.getIgnoreCase()+";");
    ostr.println("    }   ");
    ostr.println(" }");
    ostr.close();
  }

  static public void start() throws MetaParseException {

    Token t = null;
    keepLineCol = Options.getKeepLineColumn();

    if (JavaCCErrors.get_error_count() != 0) throw new MetaParseException();

    gen_ElementType();
    gen_ElementTypes();
    gen_Language();
    try {
      ostr = new java.io.PrintWriter(
                new java.io.BufferedWriter(
                   new java.io.FileWriter(
                     new java.io.File(Options.getOutputDirectory(), cu_name + "Constants.java")
                   ),
                   8192
                )
             );
    } catch (java.io.IOException e) {
      JavaCCErrors.semantic_error("Could not open file " + cu_name + "Constants.java for writing.");
      throw new Error();
    }

    List tn = new ArrayList(toolNames);
    tn.add(toolName);
    ostr.println("/* " + getIdString(tn, cu_name + "Constants.java") + " */");

    if (cu_to_insertion_point_1.size() != 0 &&
        ((Token)cu_to_insertion_point_1.get(0)).kind == PACKAGE
       ) {
      for (int i = 1; i < cu_to_insertion_point_1.size(); i++) {
        if (((Token)cu_to_insertion_point_1.get(i)).kind == SEMICOLON) {
          printTokenSetup((Token)(cu_to_insertion_point_1.get(0)));
          for (int j = 0; j <= i; j++) {
            t = (Token)(cu_to_insertion_point_1.get(j));
            printToken(t, ostr);
          }
          printTrailingComments(t, ostr);
          ostr.println("");
          ostr.println("");
          break;
        }
      }
    }
    ostr.println("import com.intellij.psi.tree.IElementType;");
    ostr.println("/**");
    ostr.println(" * Token literal values and constants.");
    ostr.println(" * Generated by org.javacc.parser.OtherFilesGen#start()");
    ostr.println(" */");
    if(Options.getSupportClassVisibilityPublic()) {
    	ostr.print("public ");
    }
    ostr.println("interface " + cu_name + "Constants {");
    ostr.println("");
    RegularExpression re;
    for (java.util.Iterator it = ordered_named_tokens.iterator(); it.hasNext();) {
      re = (RegularExpression)it.next();
      ostr.println("  /** RegularExpression Id. */");
      ostr.print("  IElementType " + re.label + " = new "+cu_name+"ElementType(\"");
        if (re instanceof RStringLiteral) {
          ostr.print(add_escapes(add_escapes(((RStringLiteral)re).image)));
        } else if (!re.label.equals("")) {
          ostr.print("<" + re.label + ">");
        } else {
          if (re.tpContext.kind == TokenProduction.TOKEN) {
            JavaCCErrors.warning(re, "Consider giving this non-string token a label for better error reporting.");
          }
          ostr.print("<token of kind " + re.ordinal + ">");
        }
      ostr.println( "\");");
    }
    ostr.println("");
    ostr.println("");
    ostr.println("}");

    ostr.close();

  }

  static private java.io.PrintWriter ostr;

  public static void reInit()
  {
    ostr = null;
  }

}
